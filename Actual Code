# Initialize the constants
import sys

# Define the Menu class
class Menu:
    def __init__(self, main_menu = 0):
        self.main_menu = main_menu
    
    # Define a function to allow user to choose from menu options
    def user_input(self):
        while True:
            user_selection = input("Welcome to the main menu. Select a number: \n1. Patient Portal\n"
                                   "2. Doctor Portal\n"
                                   "3. Nurse Portal\n"
                                   "4. Exit Program\n"
                                   "Please select: ")
            try: 
                try:
                    self.main_menu = int(user_selection)
                    if self.main_menu == 1:
                        print("Patient Portal selected. ")
                        d = Patient()
                        d.patient_names()
                        break
                    elif self.main_menu == 2:
                        print("Doctor Portal selected. ")
                        e = Doctor()
                        e.doctor_login()
                        break
                        
                    elif self.main_menu == 3:
                        print("Nurse Portal Selected. ")
                        f = Nurse()
                        f.nurse_menu()
                    elif self.main_menu == 4:
                        print("Exiting Program ")
                        sys.exit(0)
                    else:
                        print('Wrong number selected. Try again. \n')
                except ValueError:
                    self.main_menu = float(user_selection)
            except ValueError:
                print("Error, not a number. Try again. \n")

# PERSON MODULE
class Person:
    def __init__(self, last_name, first_name):
        self.first_name = first_name
        self.last_name = last_name

    def print_name(self):
        print('\nProfile for %s %s: , Email: %s: , Phone number: %s' 
              % (self.first_name, self.last_name, self.email, self.phone)) 
        
# DOCTOR MODULE       
class Doctor(Person):
    # Initialize Doctor constants
    def __init__(self, first_name = '', last_name = '', dictionary_keys = {}, test_list = {}, cost = 0, tests = {}, tabulation_total = [], total = 0, addition = [], q = [], medication = [], medications = [], price = []):
        super().__init__(first_name, last_name)
        self.first_name = first_name
        self.last_name = last_name
        self.dictionary_keys = dictionary_keys
        self.test_list = test_list
        self.cost = cost
        self.tests = tests
        self.tabulation_total = tabulation_total
        self.q = q
        self.total = total
        self.addition = addition
        self.medication = medication
        self.medications = medications
        self.price = price
        
    # Doctor login
    def doctor_login(self):
        w = Doctor()
        print("Hello! Before going any further, provide your Doctor login please. ")
        while True:
            try:
                try:
                    default_doctor_ID = "c"
                    default_doctor_password = 1 
                    doctor_input = input("Username: ")
                    if doctor_input == default_doctor_ID:
                        doctor_input = int(input("What is your password? "))
                        if doctor_input == default_doctor_password:
                            print("Welcome default doctor\n")
                            w.doctor_menu()
                        else:
                            print("Wrong password")
                    else:
                        print("Wrong username. ")
                except ValueError:
                    doctor_input = float(doctor_input)
            except ValueError:
                print("Try again. ")                
                
    # Defines the doctor menu
    def doctor_menu(self):
        w = Doctor()
        n = Nurse()
        main_menu = Menu()
        while True:
            try:
                doctor_welcome = int(input("Welcome to the Doctor Portal. \nTo create a Patient profile, press 1.\n"
                                            "For a list of patients, press 2.\nTo assign lab tests to a patient, press 3.\n"
                                            "To create a new Doctor Profile, press 4.\n"
                                            "To assign medication, press 5.\n"
                                            "To switch to  Nurse view, Press 6\n"
                                            "To discharge a patient, press 7"
                                            "To go back to the main menu, press 0. Please select: "))
                try:
                    if doctor_welcome == 0:
                        main_menu.user_input()
                    elif doctor_welcome == 1:
                        print('Welcome to create a patient profile. ')
                        key_add = int(input("How many patients to add? "))
                        for patient in range(key_add):
                            w.database_addition()
                            w.database()
                        back_to_patient_menu = input('Back to patient menu? (Y)es or (N)o?  ')
                        if back_to_patient_menu == "n" or back_to_patient_menu == "N":
                            break
                        while back_to_patient_menu != 'y' and back_to_patient_menu != 'Y':
                            back_to_patient_menu = input("That's not a valid choice. (Y)es or (N)o? ")
                            if back_to_patient_menu == "n" or back_to_patient_menu == "N":
                                sys.exit()
                    elif doctor_welcome == 2:
                        if not self.dictionary_keys:
                            print("Empty")
                        else:
                            print("Here's a list: ")
                            w.database()
                    elif doctor_welcome == 3:
                        w.lab_tests_request()
                        
                    elif doctor_welcome == 4:
                        w.create_new_doctor()
                        
                    elif doctor_welcome == 5:
                        print('Now entering Nurse view:')
                        n.nurse_menu()
                    elif doctor_welcome == 6:
                        w.discharge_patient()

                except ValueError:
                    doctor_welcome = float(doctor_welcome)
            except ValueError:
                print("Try again. ")
                             
    # Assign unique patient ID and get patient info
    def database_addition(self):
        print("For the key identifier, we'll use the patient ID. ")
        key_id = input("Patient ID: ")
        attributes_list = []
        self.first_name = input("First name: ")
        attributes_list.append(self.first_name)
        self.last_name = input("Last name: ")
        attributes_list.append(self.last_name)
        self.age = int(input("Patient's Age: "))
        attributes_list.append(self.age)
        self.address = input("Patient's Address: ")
        attributes_list.append(self.address)
        self.admit_date = input("Admit date: ")
        attributes_list.append(self.admit_date)
        self.key_two = input("Test ID: ")
        self.addition = int(input("test cost: "))
        attributes_list.append(self.addition)
        self.dictionary_keys[key_id] = attributes_list
        
    # Create discharge patient function
    def discharge_patient(self):
        filename = input("First Name: ")
        filename_2 = input("Last Name: ")
        with open(filename + filename_2 + "_discharged", "w") as f:
            f.write((filename))
            number = input("ID to discharge: ")
            test = input("Test ID:")
            if number in self.dictionary_keys.keys():
                pop_dict = self.dictionary_keys.pop(test)
                pop_dict = self.dictionary_keys.pop(number)
            print(self.dictionary_keys)  
                           
                           
    # Create a lab test database               
    def database(self):
        for key,value in self.dictionary_keys.items():
            print(key,value)
            
    # Fetch lab test database       
    def fetch_database(self,key):
        return self.dictionary_keys[key]
    
    # Defines a list of lab tests to choose from with associated prices
    def lab_tests(self):
        self.test = {'ABG': 500 , 'LFT': 400, 'COAGULATION': 600, 'CBC': 200, 'TSH': 100, 'CHOLESTEROL': 200}
        for key,value in self.test.items():
            print(key,value)
            
    # Fetches lab tests
    def fetch_lab_tests(self,key):
        return self.test_list[key]
    
    # Fetches lab tests costs
    def fetch_lab_costs(self):
        return self.test_list.values()
        
    # Defines a function to request the lab tests 
    def lab_tests_request(self):
        qt = Doctor()
        qt.database()
        while True:  
            try:
                self.tests.clear()
                doctor_request = input('Select the patient ID for the patient you wish to request tests: ')
                name_request = input("What is the patient's first name? ")
                number = input("Test number? ")
                request = qt.fetch_database_value(doctor_request)
                request_two = qt.fetch_database_value(number)
                print(request)
                qt.lab_tests()
                if number in self.dictionary_keys.keys():
                    if doctor_request in self.dictionary_keys.keys():
                        if name_request in request:
                            request_number = int(input("How many tests to request? "))
                            for test in range(request_number):
                                test_request = input('Which test to request? ').upper()
                                test = qt.fetch_lab_tests(test_request)
                                test_cost = qt.fetch_lab_costs()
                                if test in test_cost: 
                                    self.cost = test
                                    self.tests[test_request] = self.cost
                                    request_two.append(self.cost)
                                    self.total = sum(request_two)
                                else:
                                    print("Test not found")  
                            print(self.total)
                            request.append(self.tests.copy())
                            self.tabulation_total.append(self.cost) 
                            qt.test_cost()
                        user_input = input("Back to test menu? ")
                        if user_input == "y" or user_input == "Y":
                            qt.lab_tests_request()
                        if user_input == "n" or user_input == "N":
                            qt.doctor_menu()
            except ValueError:            
                print("Try again")
    def test_cost(self):
        print('\n'.join("{}: ${}".format(k,v) for k,v in self.tests.items()))

 # Creates medication database
    def medication_database(self):
        for key,value in self.dictionary_keys.items():
            print(key,value)
    # Returns patient ID
    def fetch_medication_database(self,key):
        return self.dictionary_keys[key]
    # Defines a list of lab tests to choose from with associated prices
    def medication_types(self):
        self.medication = {'ANTIBIOTIC': 50 , 'DNASE': 40, 'IBUPROFEN': 6, 'ALBUTEROL': 20, 'THEOPHYLINE': 100, 'INSULIN': 200}
        for key,value in self.medication.items():
            print(key,value)
    # Fetches medication
    def fetch_medication(self,key):
        return self.medication[key]
    # Fetches medication costs
    def fetch_medication_price(self):
        return self.medication.values()
    # Writes a text file with medication cost
    def medication_price(self):
        w = sum(self.medications.values())
        #for key in self.tests:
        print(f'The medications ordered are {self.medications} and the sum of medications ordered is ${w}')
            #print("The tests ordered are: {} ".format(key),end = "")
    
    # get dosage, route, and frequency information
    def medication_dosage():
        medication_doseage = input("Please indicate how many milligrams of the medication is to be taken")
    def medication_route():
        medication_route = input("Please indicate how medication is to be administered\nOrally, Intravenously, or via Injection")
    def medication_frequency():
        medication_frequency = input("Please indicate the frequency of which the medication is to be taken/administered")
    
    # allow doctor to assign medications
    def assign_medication(self):
        q = Doctor()
        q.database()
        assign_medication = input('Select the patient receiving the medication: ')
        #Patient Request
        patient_Request = q.fetch_database(assign_medication)
        print(patient_Request)
        q.medication_types()
        while True:
            try:                
                req_number = int(input("How many medications to assign? "))
                for medication in range(req_number):
                    medication_chosen = input('Which medication(s) to request? ').upper()
                    medication = q.fetch_medication(medication_chosen)
                    medication_cost = q.fetch_medication_price()
                    if medication in medication_cost: 
                        self.price = medication
                        self.medications[medication_chosen] = self.price
                    else:
                        print("Test not found")
                q.medication_price()
                user_input = input("Back to Doctor Menu? ")
                if user_input == "y" or user_input == "Y":
                    q.doctor_menu()
                while user_input != 'y' and user_input != 'Y':
                    user_input = input("That's not a valid choice. (Y)es or (N)o? ")
                    if user_input == "n" or user_input == "N":
                        sys.exit()
            except ValueError:
                print("Try again")   
    
   # Allergies function
    def Allergies(self):
        allergiesList = []
        try:
            allergies = input('1: Input new allergies\n'
            '2: View patient allergies\n'
            '3: Return to Doctor portal\n'
            'Please select option 1, 2 or 3: ')
            allergies = int(allergies)
            try:
                if allergies == 1:
                    addedAllergies = input('How many allergies will the patient be diagnosed with: ')
                    addedAllergies = int(addedAllergies)
                    for i in addedAllergies:
                        diagnosedAllergies = input('Allergy: ')
                        allergiesList.append(diagnosedAllergies)
                    print(*allergiesList, sep = ', ')       
                elif allergies ==2:
                    if not allergiesList:
                        print('Empty')
                    else:
                        print('Allergies list: ')
                        print(*allergiesList, sep = ', ')
                elif allergies == 3:
                    sys.exit
                else:
                    print('Invalid number selected\n'
                    '1: Input new allergies\n'
                    '2: View patient allergies\n'
                    '3: Return to Doctor portal\n'
                    'Please select option 1, 2 or 3: ')
            except numberError:
                allergies = float(allergies)
        except: 
            print('Invalid input, please enter a number.')
        return allergiesList
   
 # Create a new doctor profile
    def create_new_doctor(self):
        w = Doctor()
        main_menu = Menu()
        create_new = input('Would you like to create new Doctor Profile (Y)es or (N)o?')
        
        while create_new != 'y' and create_new != 'Y':
            create_new = input("That's not a valid choice, please try again\n (Y)es or (N)o? ")
            print(create_new)

        if create_new == 'Y' or create_new == 'y':
            print('Lets create a new profile')
            attributes_list2 = []
            self.first_name = input('Please enter the first name of the doctor you wish to add: ')
            attributes_list2.append(self.first_name)
            self.last_name = input('Please enter the last name of the doctor you wish to add: ')
            attributes_list2.append(self.last_name)
            self.specialty = input('Please enter specialty: ')
            attributes_list2.append(self.specialty)
            self.phone_number = input('Please enter phone number: ')
            attributes_list2.append(self.phone_number)
            self.username = input('Please enter new Username: ')
            attributes_list2.append(self.username)
            self.password = input('Please enter New password: ')
            attributes_list2.append(self.password)
            print('The following doctor profile was written: \nFirst Name: %s \nLast Name %s \nSpecialty %s \nPhone Number %s \nusername %s \nPassword %s'
                              % (self.first_name, self.last_name, self.specialty, self.phone_number, self.username, self.password))

            # Store new doctor login info
            doctor_login_info = {'c':'1'}
            doctor_login_info[username] = password
            print(doctor_login_info)
            

# PATIENT CLASS
class Patient(Doctor):
    def __init__(self, patient_id = 0, first_name = '', last_name = '', age = 0,
                 address = '', admit_date = ''):
        super().__init__(first_name = '', last_name = '', dictionary_keys = {}, test_list = {}, cost = 0, tests = {}, tabulation_total = [], total = 0, addition = [])
        self.patient_id = patient_id
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.address = address
        self.admit_date = admit_date
        
    # Get patient informtion
    def patient_names(self):
        w = Doctor()
        main_menu = Menu()
    
        while True:
            count = 0
            counts = 0
            try:
                patient_welcome = int(input("If you're a patient and would like to see your profile, press 1.\n"
                                            "To go back to the main menu, press 0. Please select: "))
                try:
                    if patient_welcome == 0:
                        main_menu.user_input()
                    if patient_welcome == 1:
                        patient_id = input("What is your unique patient ID? ")
                        patient_first_name = input("What is your first name? ")
                        patient_last_name = input("What is your last name? ")

                        
                        if patient_first_name in result:
                            if patient_last_name in result:
                                for c in patient_first_name:
                                    if c in result[0]:
                                        count += 1
                                for c in patient_last_name:
                                    if c  in result[1]:
                                        counts += 1
                                s = '*'
                                print(f'Hello {patient_first_name[0] :{s}<{count}}' + f'{patient_last_name[0] :{s}<{counts}}')
                                w.test_cost()
                            else:
                                print("Not in database. ")
                        else:
                            print("Not in database. ")
                    else:
                        print('Wrong number selected. Try again. \n')
                except ValueError:
                    patient_welcome = float(patient_welcome)
            except ValueError:
                print("Error, not a number. Next time, enter numeric input. \n")
   
 
    def __str__(self):
        return self.patient_names()

        
# Define a nurse module
class Nurse():    
    def __init__(self, patient_id = 0, first_name = '', last_name = '', age = 0,
                 address = '', admit_date = ''):
        self.patient_id = patient_id
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.address = address
        self.admit_date = admit_date
        
    # Define the nurse menu
    def nurse_menu(self):
        n = Nurse()
        count = 0
        counts = 0
        main_menu = Menu()
        dictionary_keys = {}
        while True:
            try:
                nurse_welcome = int(input("Welcome to the Nurse portal.\nTo create a new patient press 1\n"
                                        "To view a patients details, press 2\nTo return to the main menu, press 0"))
                try: 
                    nurse_welcome = int(nurse_welcome)
                    if nurse_welcome == 0:
                        main_menu.user_input()
                    if nurse_welcome == 1:
                        print("Nurse Portal selected.")
                        key_add = int(input("How many patients to add? "))
                        for i in range(key_add):
                            print("For the key identifier, we'll use the patient ID. ")
                            key_id = input("Patient ID: ")
                            attributes_list = []
                            self.first_name = input("First name: ")
                            attributes_list.append(self.first_name)
                            self.last_name = input("Last name: ")
                            attributes_list.append(self.last_name)
                            self.age = int(input("age: "))
                            attributes_list.append(self.age)
                            self.address = input("Address: ")
                            attributes_list.append(self.address)
                            self.admit_date = input("Admit date: ")
                            attributes_list.append(self.admit_date)
                            dictionary_keys[key_id] = attributes_list
                        for key, value in dictionary_keys.items():
                            print(key, value)
                        back_to_patient_menu = input('Back to nurse menu? ')
                        if back_to_patient_menu == "n" or back_to_patient_menu == "N":
                            break
                        while back_to_patient_menu != 'y' and back_to_patient_menu != 'Y':
                            back_to_patient_menu = input("That's not a valid choice. (Y)es or (N)o? ")
                            if back_to_patient_menu == "n" or back_to_patient_menu == "N":
                                sys.exit()
                    elif nurse_welcome == 2:
                        print("Here's a list: ")
                        for key, value in dictionary_keys.items():
                                print("Patient ID: ", key, value)
    
                        else:
                            if not dictionary_keys:
                                break
                            
                    else:
                        print('Wrong number selected. Try again. \n')
                except ValueError:
                    patient_welcome = float(patient_welcome)
            except ValueError:
                print("Error, not a number. Next time, enter numeric input. \n")
        return dictionary_keys    

    
# Initialize the program by calling the Menu() and user_input() functions    
initialize = Menu()
initialize.user_input()
